// Версия ProtoBuf

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: branch/branch.proto

// Текущий пакет - указывает пространство имен для сервиса и сообщений. Помогает избегать конфликтов имен.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Branch_ListBranches_FullMethodName = "/branch.Branch/ListBranches"
	Branch_NewBranch_FullMethodName    = "/branch.Branch/NewBranch"
	Branch_AlterBranch_FullMethodName  = "/branch.Branch/AlterBranch"
	Branch_DeleteBranch_FullMethodName = "/branch.Branch/DeleteBranch"
)

// BranchClient is the client API for Branch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BranchClient interface {
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	NewBranch(ctx context.Context, in *NewBranchRequest, opts ...grpc.CallOption) (*NewBranchResponse, error)
	AlterBranch(ctx context.Context, in *AlterBranchRequest, opts ...grpc.CallOption) (*AlterBranchResponse, error)
	DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error)
}

type branchClient struct {
	cc grpc.ClientConnInterface
}

func NewBranchClient(cc grpc.ClientConnInterface) BranchClient {
	return &branchClient{cc}
}

func (c *branchClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, Branch_ListBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) NewBranch(ctx context.Context, in *NewBranchRequest, opts ...grpc.CallOption) (*NewBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewBranchResponse)
	err := c.cc.Invoke(ctx, Branch_NewBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) AlterBranch(ctx context.Context, in *AlterBranchRequest, opts ...grpc.CallOption) (*AlterBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlterBranchResponse)
	err := c.cc.Invoke(ctx, Branch_AlterBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *branchClient) DeleteBranch(ctx context.Context, in *DeleteBranchRequest, opts ...grpc.CallOption) (*DeleteBranchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBranchResponse)
	err := c.cc.Invoke(ctx, Branch_DeleteBranch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BranchServer is the server API for Branch service.
// All implementations must embed UnimplementedBranchServer
// for forward compatibility.
type BranchServer interface {
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	NewBranch(context.Context, *NewBranchRequest) (*NewBranchResponse, error)
	AlterBranch(context.Context, *AlterBranchRequest) (*AlterBranchResponse, error)
	DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error)
	mustEmbedUnimplementedBranchServer()
}

// UnimplementedBranchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBranchServer struct{}

func (UnimplementedBranchServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedBranchServer) NewBranch(context.Context, *NewBranchRequest) (*NewBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBranch not implemented")
}
func (UnimplementedBranchServer) AlterBranch(context.Context, *AlterBranchRequest) (*AlterBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterBranch not implemented")
}
func (UnimplementedBranchServer) DeleteBranch(context.Context, *DeleteBranchRequest) (*DeleteBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBranch not implemented")
}
func (UnimplementedBranchServer) mustEmbedUnimplementedBranchServer() {}
func (UnimplementedBranchServer) testEmbeddedByValue()                {}

// UnsafeBranchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BranchServer will
// result in compilation errors.
type UnsafeBranchServer interface {
	mustEmbedUnimplementedBranchServer()
}

func RegisterBranchServer(s grpc.ServiceRegistrar, srv BranchServer) {
	// If the following call pancis, it indicates UnimplementedBranchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Branch_ServiceDesc, srv)
}

func _Branch_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Branch_ListBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_NewBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).NewBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Branch_NewBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).NewBranch(ctx, req.(*NewBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_AlterBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).AlterBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Branch_AlterBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).AlterBranch(ctx, req.(*AlterBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Branch_DeleteBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BranchServer).DeleteBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Branch_DeleteBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BranchServer).DeleteBranch(ctx, req.(*DeleteBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Branch_ServiceDesc is the grpc.ServiceDesc for Branch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Branch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "branch.Branch",
	HandlerType: (*BranchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBranches",
			Handler:    _Branch_ListBranches_Handler,
		},
		{
			MethodName: "NewBranch",
			Handler:    _Branch_NewBranch_Handler,
		},
		{
			MethodName: "AlterBranch",
			Handler:    _Branch_AlterBranch_Handler,
		},
		{
			MethodName: "DeleteBranch",
			Handler:    _Branch_DeleteBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "branch/branch.proto",
}
