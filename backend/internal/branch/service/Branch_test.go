// Code generated by mockery v2.52.4. DO NOT EDIT.

package branch_service_test

import (
	context "context"
	proto "pim-sys/gen/go/branch"

	mock "github.com/stretchr/testify/mock"
)

// Branch is an autogenerated mock type for the Branch type
type Branch struct {
	mock.Mock
}

// AlterBranch provides a mock function with given fields: ctx, branchId, name, description, address, site
func (_m *Branch) AlterBranch(ctx context.Context, branchId int32, name string, description string, address string, site string) error {
	ret := _m.Called(ctx, branchId, name, description, address, site)

	if len(ret) == 0 {
		panic("no return value specified for AlterBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, string, string, string) error); ok {
		r0 = rf(ctx, branchId, name, description, address, site)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBranch provides a mock function with given fields: ctx, branchId
func (_m *Branch) DeleteBranch(ctx context.Context, branchId int32) error {
	ret := _m.Called(ctx, branchId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, branchId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListBranches provides a mock function with given fields: ctx, shop_id
func (_m *Branch) ListBranches(ctx context.Context, shop_id int32) ([]*proto.BranchInfo, error) {
	ret := _m.Called(ctx, shop_id)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 []*proto.BranchInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*proto.BranchInfo, error)); ok {
		return rf(ctx, shop_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*proto.BranchInfo); ok {
		r0 = rf(ctx, shop_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.BranchInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, shop_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBranch provides a mock function with given fields: ctx, name, shop_id, description, address, site, branchtype
func (_m *Branch) NewBranch(ctx context.Context, name string, shop_id int32, description string, address string, site string, branchtype string) error {
	ret := _m.Called(ctx, name, shop_id, description, address, site, branchtype)

	if len(ret) == 0 {
		panic("no return value specified for NewBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, string, string, string, string) error); ok {
		r0 = rf(ctx, name, shop_id, description, address, site, branchtype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBranch creates a new instance of Branch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBranch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Branch {
	mock := &Branch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
