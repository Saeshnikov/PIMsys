// Code generated by mockery v2.52.4. DO NOT EDIT.

package shop_app_test

import (
	context "context"
	proto "pim-sys/gen/go/logs"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetLogs provides a mock function with given fields: ctx, userId
func (_m *Storage) GetLogs(ctx context.Context, userId int32) ([]*proto.Log, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []*proto.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*proto.Log, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*proto.Log); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinDate provides a mock function with given fields: ctx, dateFrom
func (_m *Storage) GetMinDate(ctx context.Context, dateFrom int64) error {
	ret := _m.Called(ctx, dateFrom)

	if len(ret) == 0 {
		panic("no return value specified for GetMinDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, dateFrom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSales provides a mock function with given fields: ctx, TimeFrom, TimeTo, userId
func (_m *Storage) GetSales(ctx context.Context, TimeFrom int64, TimeTo int64, userId int32) ([]*proto.Graph, error) {
	ret := _m.Called(ctx, TimeFrom, TimeTo, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetSales")
	}

	var r0 []*proto.Graph
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int32) ([]*proto.Graph, error)); ok {
		return rf(ctx, TimeFrom, TimeTo, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int32) []*proto.Graph); ok {
		r0 = rf(ctx, TimeFrom, TimeTo, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Graph)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int32) error); ok {
		r1 = rf(ctx, TimeFrom, TimeTo, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
