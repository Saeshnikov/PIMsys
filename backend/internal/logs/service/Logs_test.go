// Code generated by mockery v2.52.4. DO NOT EDIT.

package logs_service_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "pim-sys/gen/go/logs"
)

// Logs is an autogenerated mock type for the Logs type
type Logs struct {
	mock.Mock
}

// GetGraph provides a mock function with given fields: ctx, content
func (_m *Logs) GetGraph(ctx context.Context, content *proto.GetGraphRequest) (*proto.GetGraphResponse, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for GetGraph")
	}

	var r0 *proto.GetGraphResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetGraphRequest) (*proto.GetGraphResponse, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetGraphRequest) *proto.GetGraphResponse); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetGraphResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetGraphRequest) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: ctx, content
func (_m *Logs) GetLogs(ctx context.Context, content *proto.GetLogsRequest) (*proto.GetLogsResponse, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 *proto.GetLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetLogsRequest) (*proto.GetLogsResponse, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetLogsRequest) *proto.GetLogsResponse); ok {
		r0 = rf(ctx, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetLogsRequest) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLogs creates a new instance of Logs. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogs(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logs {
	mock := &Logs{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
