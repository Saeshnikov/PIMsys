// Code generated by mockery v2.52.4. DO NOT EDIT.

package product_app_test

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "pim-sys/gen/go/products"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AlterAttributes provides a mock function with given fields: ctx, productId, attr
func (_m *Storage) AlterAttributes(ctx context.Context, productId int32, attr *proto.Attribute) error {
	ret := _m.Called(ctx, productId, attr)

	if len(ret) == 0 {
		panic("no return value specified for AlterAttributes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, *proto.Attribute) error); ok {
		r0 = rf(ctx, productId, attr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlterProduct provides a mock function with given fields: ctx, content
func (_m *Storage) AlterProduct(ctx context.Context, content *proto.ProductInfoWithId) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for AlterProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ProductInfoWithId) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateProduct provides a mock function with given fields: ctx, content
func (_m *Storage) CreateProduct(ctx context.Context, content *proto.ProductInfo) (int32, error) {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ProductInfo) (int32, error)); ok {
		return rf(ctx, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proto.ProductInfo) int32); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proto.ProductInfo) error); ok {
		r1 = rf(ctx, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, content
func (_m *Storage) DeleteProduct(ctx context.Context, content *proto.DeleteProductRequest) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.DeleteProductRequest) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccessableBranchIds provides a mock function with given fields: ctx, userId
func (_m *Storage) GetAccessableBranchIds(ctx context.Context, userId int32) ([]int32, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessableBranchIds")
	}

	var r0 []int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]int32, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []int32); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: ctx, userId
func (_m *Storage) ListProducts(ctx context.Context, userId int32) ([]*proto.ProductInfoWithId, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListProducts")
	}

	var r0 []*proto.ProductInfoWithId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*proto.ProductInfoWithId, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*proto.ProductInfoWithId); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.ProductInfoWithId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SellProduct provides a mock function with given fields: ctx, content
func (_m *Storage) SellProduct(ctx context.Context, content *proto.SellProductRequest) error {
	ret := _m.Called(ctx, content)

	if len(ret) == 0 {
		panic("no return value specified for SellProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SellProductRequest) error); ok {
		r0 = rf(ctx, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
