// Code generated by mockery v2.52.4. DO NOT EDIT.

package template_app_test

import (
	context "context"
	proto "pim-sys/gen/go/template"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateTemplate provides a mock function with given fields: ctx, branch_id, name, description, attributes
func (_m *Storage) CreateTemplate(ctx context.Context, branch_id int32, name string, description string, attributes []*proto.AttributeInfo) error {
	ret := _m.Called(ctx, branch_id, name, description, attributes)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, string, []*proto.AttributeInfo) error); ok {
		r0 = rf(ctx, branch_id, name, description, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTemplate provides a mock function with given fields: ctx, templateId
func (_m *Storage) DeleteTemplate(ctx context.Context, templateId int32) error {
	ret := _m.Called(ctx, templateId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, templateId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBranchIdFromTemplateId provides a mock function with given fields: ctx, template_id
func (_m *Storage) GetBranchIdFromTemplateId(ctx context.Context, template_id int32) (int32, error) {
	ret := _m.Called(ctx, template_id)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchIdFromTemplateId")
	}

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (int32, error)); ok {
		return rf(ctx, template_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) int32); ok {
		r0 = rf(ctx, template_id)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, template_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserListBranches provides a mock function with given fields: ctx, user_id
func (_m *Storage) GetUserListBranches(ctx context.Context, user_id int32) ([]int32, error) {
	ret := _m.Called(ctx, user_id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserListBranches")
	}

	var r0 []int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]int32, error)); ok {
		return rf(ctx, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []int32); ok {
		r0 = rf(ctx, user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, branch_id
func (_m *Storage) ListTemplates(ctx context.Context, branch_id int32) ([]*proto.TemplateInfo, error) {
	ret := _m.Called(ctx, branch_id)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 []*proto.TemplateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*proto.TemplateInfo, error)); ok {
		return rf(ctx, branch_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*proto.TemplateInfo); ok {
		r0 = rf(ctx, branch_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.TemplateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, branch_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
