// Code generated by mockery v2.52.4. DO NOT EDIT.

package template_service_test

import (
	context "context"
	proto "pim-sys/gen/go/template"

	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

// DeleteTemplate provides a mock function with given fields: ctx, template_id
func (_m *Template) DeleteTemplate(ctx context.Context, template_id int32) error {
	ret := _m.Called(ctx, template_id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, template_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListTemplates provides a mock function with given fields: ctx, branch_id
func (_m *Template) ListTemplates(ctx context.Context, branch_id int32) ([]*proto.TemplateInfo, error) {
	ret := _m.Called(ctx, branch_id)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 []*proto.TemplateInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]*proto.TemplateInfo, error)); ok {
		return rf(ctx, branch_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []*proto.TemplateInfo); ok {
		r0 = rf(ctx, branch_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.TemplateInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, branch_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTemplate provides a mock function with given fields: ctx, name, description, branch_id, attributes
func (_m *Template) NewTemplate(ctx context.Context, name string, description string, branch_id int32, attributes []*proto.AttributeInfo) error {
	ret := _m.Called(ctx, name, description, branch_id, attributes)

	if len(ret) == 0 {
		panic("no return value specified for NewTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int32, []*proto.AttributeInfo) error); ok {
		r0 = rf(ctx, name, description, branch_id, attributes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
