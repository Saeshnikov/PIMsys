CREATE TYPE shop_type AS ENUM ('online', 'marketplace', 'offline');
CREATE TYPE attribute_type AS ENUM ('boolean','text','number');
CREATE TYPE product_status AS ENUM ('stock', 'archive', 'withdrawn_from_sale','out_of_stock');

CREATE TABLE "users" (
  id serial PRIMARY KEY,
  name varchar(32) NOT NULL,
  email varchar(64) NOT NULL UNIQUE,
  password varchar(64) NOT NULL,
  phone varchar(16) NOT NULL,
  description text,
  male bool,
  isAdmin bool NOT NULL
);

CREATE TABLE shop (
  id serial PRIMARY KEY,
  name varchar(32) NOT NULL,
  avatar_url text,
  description text
);

CREATE TABLE users_shop (
  id serial PRIMARY KEY,
  users_id BIGINT NOT NULL,
  shop_id BIGINT NOT NULL,
  CONSTRAINT fk_users FOREIGN KEY(users_id) REFERENCES "users"(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_shop FOREIGN KEY(shop_id) REFERENCES shop(id)
  ON DELETE CASCADE
);

CREATE TABLE branch (
  id serial PRIMARY KEY,
  name varchar(32) NOT NULL,
  description text,
  address varchar(128) NOT NULL,
  site varchar(128),
  type shop_type NOT NULL,
  shop_id BIGINT NOT NULL,
  CONSTRAINT fk_shop FOREIGN KEY(shop_id) REFERENCES shop(id)
  ON DELETE CASCADE
);

CREATE TABLE category (
  id serial PRIMARY KEY,
  name varchar(32) NOT NULL,
  description text NOT NULL,
  is_unique BOOLEAN
);

CREATE TABLE product (
  id serial PRIMARY KEY,
  category_id BIGINT NOT NULL,
  status product_status NOT NULL,
  branch_id BIGINT NOT NULL,
  amount BIGINT NOT NULL,
  price float NOT NULL,
  name varchar(32) NOT NULL,
  CONSTRAINT fk_branch FOREIGN KEY(branch_id) REFERENCES branch(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_category FOREIGN KEY(category_id) REFERENCES category(id)
  ON DELETE CASCADE
);

CREATE TABLE sales (
  id serial PRIMARY KEY,
  name varchar(32),
  date INTEGER NOT NULL,
  branch_id BIGINT NOT NULL,
  product_id BIGINT NOT NULL,
  price float NOT NULL,
  quantity int NOT NULL,
  CONSTRAINT fk_branch FOREIGN KEY(branch_id) REFERENCES branch(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_product FOREIGN KEY(product_id) REFERENCES product(id)
  ON DELETE CASCADE
);

CREATE TABLE log_journal (
  id serial PRIMARY KEY,
  shop_id INTEGER NOT NULL,
  branch_id INTEGER NOT NULL,
  product_id BIGINT NOT NULL,
  info text
);

CREATE TABLE category_branch (
  id serial PRIMARY KEY,
  branch_id BIGINT NOT NULL,
  category_id BIGINT NOT NULL,
  CONSTRAINT fk_branch FOREIGN KEY(branch_id) REFERENCES branch(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_category FOREIGN KEY(category_id) REFERENCES category(id)
  ON DELETE CASCADE
);

CREATE TABLE "attribute" (
  id serial PRIMARY KEY,
  type attribute_type NOT NULL,
  is_value_required BOOLEAN NOT NULL,
  is_unique BOOLEAN NOT NULL,
  name varchar(32) NOT NULL,
  description text 
);

CREATE TABLE category_attribute (
  id serial PRIMARY KEY,
  attribute_id BIGINT NOT NULL,
  category_id BIGINT NOT NULL,
  CONSTRAINT fk_attribute FOREIGN KEY(attribute_id) REFERENCES "attribute"(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_category FOREIGN KEY(category_id) REFERENCES category(id)
  ON DELETE CASCADE
);

CREATE TABLE product_attribute_value (
  id serial PRIMARY KEY,
  value JSONB,
  product_id BIGINT NOT NULL,
  attribute_id BIGINT NOT NULL,
  value_text TEXT NOT NULL,
  value_number NUMERIC NOT NULL,
  value_boolean BOOLEAN NOT NULL,
  CONSTRAINT fk_product FOREIGN KEY(product_id) REFERENCES product(id)
  ON DELETE CASCADE,
  CONSTRAINT fk_attribute FOREIGN KEY(attribute_id) REFERENCES attribute(id)
  ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS apps
(
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    secret TEXT NOT NULL UNIQUE
);

CREATE OR REPLACE FUNCTION add_default_categories() 
RETURNS TRIGGER 
AS $add_default_categories$
DECLARE
  inserted_categories int[] := '{}'; -- Массив ID категорий
  inserted_attributes int[] := '{}'; -- Массив ID атрибутов
  category_id int; -- Переменная для цикла FOREACH
BEGIN

  WITH webpage_rows AS (
    INSERT INTO category (name, description, is_unique) 
      VALUES 
        ('Техника', 'Различные виды техники', false),
        ('Мебель', 'Домашняя и офисная мебель', false),
        ('Одежда', 'Одежда для всех', false),
        ('Обувь', 'Различные виды обуви', false),
        ('Украшения', 'Ювелирные изделия и украшения', false),
        ('Фрукты и овощи', 'Свежие фрукты и овощи', false)
      RETURNING id
    )
  SELECT array_agg(id)
    INTO inserted_categories
    FROM webpage_rows;

  -- Связываем добавленные категории с текущей веткой
  FOREACH category_id IN ARRAY inserted_categories
  LOOP
    INSERT INTO category_branch (branch_id, category_id) VALUES (NEW.id, category_id);
  END LOOP;

  -- Добавляем атрибуты и сохраняем их ID
  WITH webpage_rows AS (
  INSERT INTO attribute (type, is_value_required, is_unique, name, description)
  VALUES
    ('text', true, false, 'Описание', 'Описание товара'),
    ('number', true, false, 'Вес', 'Вес продукта'),
    ('text', true, false, 'Цвет', 'Цвет товара'),
    ('text', true, false, 'Дата поступления', 'Дата поступления на склад'),
    ('text', true, false, 'Материал', 'Материал товара'),
    ('text', true, false, 'Срок годности', 'Срок годности товара'),
    ('text', true, false, 'Производитель', 'Наименование или производитель товара'),
    ('text', true, false, 'Пол', 'Пол (мужской, женский, унисекс)'),
    ('text', false, false, 'Сезон', 'Сезон (лето, осень и т.д.)'),
    ('text', false, false, 'Бренд', 'Бренд производителя товара'),
    ('text', true, false, 'Страна происхождения', 'Страна, откуда привезен товар'),
    ('text', true, false, 'Модель', 'Модель техники'),
    ('text', true, true, 'Спецификации', 'Технические характеристики'),
    ('number', true, false, 'Год выпуска', 'Год выпуска устройства'),
    ('number', false, false, 'Энергопотребление', 'Энергопотребление устройства в Вт'),
    ('text', true, true, 'Тип мебели', 'Тип мебели (стул, стол и т.д.)'),
    ('text', true, false, 'Размеры', 'Размеры изделия'),
    ('text', true, true, 'Тип одежды', 'Тип одежды (рубашка, брюки и т.д.)'),
    ('text', true, true, 'Размер одежды', 'Размер одежды'),
    ('text', true, true, 'Тип обуви', 'Тип обуви (ботинки, кроссовки и т.д.)'),
    ('text', true, true, 'Размер обуви', 'Размер обуви'),
    ('text', false, true, 'Вставки', 'Тип вставок (камни, кристаллы)'),
    ('text', false, true, 'Тип украшения', 'Тип украшения (кольцо, подвеска и т.д.)'),
    ('text', true, true, 'Размер украшения', 'Размер украшения')
  RETURNING id)
  SELECT array_agg(id)
    INTO inserted_attributes
    FROM webpage_rows;

   -- Привязываем атрибуты к категориям
    INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Фрукты и овощи' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Вес', 'Страна происхождения', 'Дата поступления', 'Срок годности');

  INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Техника' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Модель', 'Производитель', 'Спецификации', 'Год выпуска', 'Энергопотребление', 'Вес');

  INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Мебель' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Тип мебели', 'Материал товара', 'Размеры', 'Цвет', 'Производитель', 'Вес');

  INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Одежда' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Тип одежды', 'Размер одежды', 'Материал товара', 'Цвет', 'Пол', 'Сезон', 'Бренд');

  INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Обувь' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Тип обуви', 'Размер обуви', 'Материал', 'Цвет', 'Пол', 'Сезон', 'Бренд');

  INSERT INTO category_attribute (attribute_id, category_id)
  SELECT a.id, c.id
  FROM attribute a, category c
  WHERE c.name = 'Украшения' AND c.id = ANY(inserted_categories) AND a.id = ANY(inserted_attributes) AND a.name IN ('Тип украшения', 'Материал', 'Вставки', 'Размер украшения', 'Бренд', 'Вес');


  RETURN NEW;
END;
$add_default_categories$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_add_default_categories 
AFTER INSERT ON branch
FOR EACH ROW
EXECUTE FUNCTION add_default_categories();

CREATE OR REPLACE FUNCTION check_product_amount() RETURNS TRIGGER
AS $check_product_amount$
BEGIN
  IF NEW.amount < 0 THEN
    RAISE EXCEPTION 'new.amount value cannot be below zero: %', NEW.amount;
  ELSEIF NEW.amount = 0 THEN
    NEW.status := 'out_of_stock'::product_status;
  ELSEIF NEW.amount > 0 THEN
    NEW.status := 'stock'::product_status;
  END IF;

  RETURN NEW;
END;
$check_product_amount$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_update_product_amount
AFTER UPDATE ON product
FOR EACH ROW
EXECUTE FUNCTION check_product_amount();

CREATE OR REPLACE FUNCTION check_product_attribute_value() RETURNS TRIGGER
AS $check_product_attribute_value$
DECLARE
  value_required BOOLEAN;
  unique_required BOOLEAN;
  type_attribute attribute_type;
  temp_row RECORD; -- Для работы с FOR ... IN
BEGIN
    -- Получение типа, флага обязательности значения и уникальности из таблицы attribute
    SELECT type, is_value_required, is_unique
      INTO type_attribute, value_required, unique_required
      FROM attribute
      WHERE id = NEW.attribute_id;

    -- Проверка на обязательность значения
    IF value_required = true THEN
      IF (type_attribute = 'text'::attribute_type AND NEW.value_text IS NULL)
       OR (type_attribute = 'boolean'::attribute_type AND NEW.value_boolean IS NULL)
       OR (type_attribute = 'number'::attribute_type AND NEW.value_number IS NULL)
      THEN
          RAISE EXCEPTION 'product_attribute_value is required in attribute: %', NEW.attribute_id;
      END IF;
    END IF;

    -- Проверка на уникальность значения
    IF unique_required = true THEN
      IF type_attribute = 'text'::attribute_type THEN
        FOR temp_row IN
          SELECT val.value_text AS value FROM product_attribute_value val
          WHERE val.attribute_id = NEW.attribute_id
        LOOP
          IF temp_row.value = NEW.value_text THEN
            RAISE EXCEPTION 'product_attribute_value:text is not unique';
          END IF;
        END LOOP;

      ELSIF type_attribute = 'number'::attribute_type THEN
        FOR temp_row IN
          SELECT val.value_number AS value FROM product_attribute_value val
          WHERE val.attribute_id = NEW.attribute_id
        LOOP
          IF temp_row.value = NEW.value_number THEN
            RAISE EXCEPTION 'product_attribute_value:number is not unique';
          END IF;
        END LOOP;

      ELSIF type_attribute = 'boolean'::attribute_type THEN
        FOR temp_row IN
          SELECT val.value_boolean AS value FROM product_attribute_value val
          WHERE val.attribute_id = NEW.attribute_id
        LOOP
          IF temp_row.value = NEW.value_boolean THEN
            RAISE EXCEPTION 'product_attribute_value:boolean is not unique';
          END IF;
        END LOOP;

      END IF;
    END IF;

    RETURN NEW;
END;
$check_product_attribute_value$ LANGUAGE plpgsql;


CREATE OR REPLACE TRIGGER trigger_insert_product_attribue_value
BEFORE INSERT ON product_attribute_value
FOR EACH ROW
EXECUTE FUNCTION check_product_attribute_value();

CREATE OR REPLACE FUNCTION product_update_log() RETURNS TRIGGER
AS $product_update_log$
DECLARE
log_info text;
product_shop_id BIGINT;
BEGIN 
  SELECT shop_id
  INTO product_shop_id
  FROM branch 
  WHERE id = OLD.branch_id
  LIMIT 1;

  log_info := 'Изменено: ';
  IF NEW.name <> OLD.name THEN
    log_info := log_info || 'название (' || OLD.name || ' -> ' || NEW.name || ') ';
  END IF;
  IF NEW.category_id <> OLD.category_id THEN
    log_info := log_info || 'id категории (' || OLD.category_id || ' -> ' || NEW.category_id || ') ';
  END IF;
  IF NEW.status <> OLD.status THEN
    log_info := log_info || 'статус (' || OLD.status || ' -> ' || NEW.status || ') ';
  END IF;
  IF NEW.amount <> OLD.amount THEN
    log_info := log_info || 'количество (' || OLD.amount || ' -> ' || NEW.amount || ') ';
  END IF;
  IF NEW.price <> OLD.price THEN
    log_info := log_info || 'цена (' || OLD.price || ' -> ' || NEW.price || ') ';
  END IF;

  INSERT INTO log_journal(shop_id, branch_id, product_id, info) VALUES
  (product_shop_id, NEW.branch_id, NEW.id, log_info);

  RETURN NEW;
END;
$product_update_log$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trigger_update_product
BEFORE UPDATE ON product
FOR EACH ROW
EXECUTE FUNCTION product_update_log();
