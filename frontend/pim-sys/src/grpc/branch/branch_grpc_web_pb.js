/**
 * @fileoverview gRPC-Web generated client stub for branch
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: branch.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.branch = require('./branch_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.branch.BranchClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.branch.BranchPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.branch.ListBranchesRequest,
 *   !proto.branch.ListBranchesResponse>}
 */
const methodDescriptor_Branch_ListBranches = new grpc.web.MethodDescriptor(
  '/branch.Branch/ListBranches',
  grpc.web.MethodType.UNARY,
  proto.branch.ListBranchesRequest,
  proto.branch.ListBranchesResponse,
  /**
   * @param {!proto.branch.ListBranchesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.branch.ListBranchesResponse.deserializeBinary
);


/**
 * @param {!proto.branch.ListBranchesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.branch.ListBranchesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.branch.ListBranchesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.branch.BranchClient.prototype.listBranches =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/branch.Branch/ListBranches',
      request,
      metadata || {},
      methodDescriptor_Branch_ListBranches,
      callback);
};


/**
 * @param {!proto.branch.ListBranchesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.branch.ListBranchesResponse>}
 *     Promise that resolves to the response
 */
proto.branch.BranchPromiseClient.prototype.listBranches =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/branch.Branch/ListBranches',
      request,
      metadata || {},
      methodDescriptor_Branch_ListBranches);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.branch.NewBranchRequest,
 *   !proto.branch.NewBranchResponse>}
 */
const methodDescriptor_Branch_NewBranch = new grpc.web.MethodDescriptor(
  '/branch.Branch/NewBranch',
  grpc.web.MethodType.UNARY,
  proto.branch.NewBranchRequest,
  proto.branch.NewBranchResponse,
  /**
   * @param {!proto.branch.NewBranchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.branch.NewBranchResponse.deserializeBinary
);


/**
 * @param {!proto.branch.NewBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.branch.NewBranchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.branch.NewBranchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.branch.BranchClient.prototype.newBranch =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/branch.Branch/NewBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_NewBranch,
      callback);
};


/**
 * @param {!proto.branch.NewBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.branch.NewBranchResponse>}
 *     Promise that resolves to the response
 */
proto.branch.BranchPromiseClient.prototype.newBranch =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/branch.Branch/NewBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_NewBranch);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.branch.AlterBranchRequest,
 *   !proto.branch.AlterBranchResponse>}
 */
const methodDescriptor_Branch_AlterBranch = new grpc.web.MethodDescriptor(
  '/branch.Branch/AlterBranch',
  grpc.web.MethodType.UNARY,
  proto.branch.AlterBranchRequest,
  proto.branch.AlterBranchResponse,
  /**
   * @param {!proto.branch.AlterBranchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.branch.AlterBranchResponse.deserializeBinary
);


/**
 * @param {!proto.branch.AlterBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.branch.AlterBranchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.branch.AlterBranchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.branch.BranchClient.prototype.alterBranch =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/branch.Branch/AlterBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_AlterBranch,
      callback);
};


/**
 * @param {!proto.branch.AlterBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.branch.AlterBranchResponse>}
 *     Promise that resolves to the response
 */
proto.branch.BranchPromiseClient.prototype.alterBranch =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/branch.Branch/AlterBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_AlterBranch);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.branch.DeleteBranchRequest,
 *   !proto.branch.DeleteBranchResponse>}
 */
const methodDescriptor_Branch_DeleteBranch = new grpc.web.MethodDescriptor(
  '/branch.Branch/DeleteBranch',
  grpc.web.MethodType.UNARY,
  proto.branch.DeleteBranchRequest,
  proto.branch.DeleteBranchResponse,
  /**
   * @param {!proto.branch.DeleteBranchRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.branch.DeleteBranchResponse.deserializeBinary
);


/**
 * @param {!proto.branch.DeleteBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.branch.DeleteBranchResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.branch.DeleteBranchResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.branch.BranchClient.prototype.deleteBranch =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/branch.Branch/DeleteBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_DeleteBranch,
      callback);
};


/**
 * @param {!proto.branch.DeleteBranchRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.branch.DeleteBranchResponse>}
 *     Promise that resolves to the response
 */
proto.branch.BranchPromiseClient.prototype.deleteBranch =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/branch.Branch/DeleteBranch',
      request,
      metadata || {},
      methodDescriptor_Branch_DeleteBranch);
};


module.exports = proto.branch;

