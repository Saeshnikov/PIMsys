/**
 * @fileoverview gRPC-Web generated client stub for products
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: products.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.products = require('./products_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.products.ProductClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.products.ProductPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.products.ProductInfo,
 *   !proto.products.Empty>}
 */
const methodDescriptor_Product_NewProduct = new grpc.web.MethodDescriptor(
  '/products.Product/NewProduct',
  grpc.web.MethodType.UNARY,
  proto.products.ProductInfo,
  proto.products.Empty,
  /**
   * @param {!proto.products.ProductInfo} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.products.Empty.deserializeBinary
);


/**
 * @param {!proto.products.ProductInfo} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.products.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.products.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.products.ProductClient.prototype.newProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/products.Product/NewProduct',
      request,
      metadata || {},
      methodDescriptor_Product_NewProduct,
      callback);
};


/**
 * @param {!proto.products.ProductInfo} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.products.Empty>}
 *     Promise that resolves to the response
 */
proto.products.ProductPromiseClient.prototype.newProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/products.Product/NewProduct',
      request,
      metadata || {},
      methodDescriptor_Product_NewProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.products.ProductInfoWithId,
 *   !proto.products.Empty>}
 */
const methodDescriptor_Product_AlterProduct = new grpc.web.MethodDescriptor(
  '/products.Product/AlterProduct',
  grpc.web.MethodType.UNARY,
  proto.products.ProductInfoWithId,
  proto.products.Empty,
  /**
   * @param {!proto.products.ProductInfoWithId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.products.Empty.deserializeBinary
);


/**
 * @param {!proto.products.ProductInfoWithId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.products.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.products.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.products.ProductClient.prototype.alterProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/products.Product/AlterProduct',
      request,
      metadata || {},
      methodDescriptor_Product_AlterProduct,
      callback);
};


/**
 * @param {!proto.products.ProductInfoWithId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.products.Empty>}
 *     Promise that resolves to the response
 */
proto.products.ProductPromiseClient.prototype.alterProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/products.Product/AlterProduct',
      request,
      metadata || {},
      methodDescriptor_Product_AlterProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.products.DeleteProductRequest,
 *   !proto.products.Empty>}
 */
const methodDescriptor_Product_DeleteProduct = new grpc.web.MethodDescriptor(
  '/products.Product/DeleteProduct',
  grpc.web.MethodType.UNARY,
  proto.products.DeleteProductRequest,
  proto.products.Empty,
  /**
   * @param {!proto.products.DeleteProductRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.products.Empty.deserializeBinary
);


/**
 * @param {!proto.products.DeleteProductRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.products.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.products.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.products.ProductClient.prototype.deleteProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/products.Product/DeleteProduct',
      request,
      metadata || {},
      methodDescriptor_Product_DeleteProduct,
      callback);
};


/**
 * @param {!proto.products.DeleteProductRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.products.Empty>}
 *     Promise that resolves to the response
 */
proto.products.ProductPromiseClient.prototype.deleteProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/products.Product/DeleteProduct',
      request,
      metadata || {},
      methodDescriptor_Product_DeleteProduct);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.products.Empty,
 *   !proto.products.Products>}
 */
const methodDescriptor_Product_ListProducts = new grpc.web.MethodDescriptor(
  '/products.Product/ListProducts',
  grpc.web.MethodType.UNARY,
  proto.products.Empty,
  proto.products.Products,
  /**
   * @param {!proto.products.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.products.Products.deserializeBinary
);


/**
 * @param {!proto.products.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.products.Products)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.products.Products>|undefined}
 *     The XHR Node Readable Stream
 */
proto.products.ProductClient.prototype.listProducts =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/products.Product/ListProducts',
      request,
      metadata || {},
      methodDescriptor_Product_ListProducts,
      callback);
};


/**
 * @param {!proto.products.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.products.Products>}
 *     Promise that resolves to the response
 */
proto.products.ProductPromiseClient.prototype.listProducts =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/products.Product/ListProducts',
      request,
      metadata || {},
      methodDescriptor_Product_ListProducts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.products.SellProductRequest,
 *   !proto.products.Empty>}
 */
const methodDescriptor_Product_SellProduct = new grpc.web.MethodDescriptor(
  '/products.Product/SellProduct',
  grpc.web.MethodType.UNARY,
  proto.products.SellProductRequest,
  proto.products.Empty,
  /**
   * @param {!proto.products.SellProductRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.products.Empty.deserializeBinary
);


/**
 * @param {!proto.products.SellProductRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.products.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.products.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.products.ProductClient.prototype.sellProduct =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/products.Product/SellProduct',
      request,
      metadata || {},
      methodDescriptor_Product_SellProduct,
      callback);
};


/**
 * @param {!proto.products.SellProductRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.products.Empty>}
 *     Promise that resolves to the response
 */
proto.products.ProductPromiseClient.prototype.sellProduct =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/products.Product/SellProduct',
      request,
      metadata || {},
      methodDescriptor_Product_SellProduct);
};


module.exports = proto.products;

