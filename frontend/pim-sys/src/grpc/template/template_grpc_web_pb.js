/**
 * @fileoverview gRPC-Web generated client stub for shop
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: template.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.shop = require('./template_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.shop.TemplateClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.shop.TemplatePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shop.ListTemplatesRequest,
 *   !proto.shop.ListTemplatesResponse>}
 */
const methodDescriptor_Template_ListTemplates = new grpc.web.MethodDescriptor(
  '/shop.Template/ListTemplates',
  grpc.web.MethodType.UNARY,
  proto.shop.ListTemplatesRequest,
  proto.shop.ListTemplatesResponse,
  /**
   * @param {!proto.shop.ListTemplatesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shop.ListTemplatesResponse.deserializeBinary
);


/**
 * @param {!proto.shop.ListTemplatesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.shop.ListTemplatesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.shop.ListTemplatesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.shop.TemplateClient.prototype.listTemplates =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/shop.Template/ListTemplates',
      request,
      metadata || {},
      methodDescriptor_Template_ListTemplates,
      callback);
};


/**
 * @param {!proto.shop.ListTemplatesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.shop.ListTemplatesResponse>}
 *     Promise that resolves to the response
 */
proto.shop.TemplatePromiseClient.prototype.listTemplates =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/shop.Template/ListTemplates',
      request,
      metadata || {},
      methodDescriptor_Template_ListTemplates);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shop.NewTemplateRequest,
 *   !proto.shop.NewTemplateResponse>}
 */
const methodDescriptor_Template_NewTemplate = new grpc.web.MethodDescriptor(
  '/shop.Template/NewTemplate',
  grpc.web.MethodType.UNARY,
  proto.shop.NewTemplateRequest,
  proto.shop.NewTemplateResponse,
  /**
   * @param {!proto.shop.NewTemplateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shop.NewTemplateResponse.deserializeBinary
);


/**
 * @param {!proto.shop.NewTemplateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.shop.NewTemplateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.shop.NewTemplateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.shop.TemplateClient.prototype.newTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/shop.Template/NewTemplate',
      request,
      metadata || {},
      methodDescriptor_Template_NewTemplate,
      callback);
};


/**
 * @param {!proto.shop.NewTemplateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.shop.NewTemplateResponse>}
 *     Promise that resolves to the response
 */
proto.shop.TemplatePromiseClient.prototype.newTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/shop.Template/NewTemplate',
      request,
      metadata || {},
      methodDescriptor_Template_NewTemplate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.shop.DeleteTemplateRequest,
 *   !proto.shop.DeleteTemplateResponse>}
 */
const methodDescriptor_Template_DeleteTemplate = new grpc.web.MethodDescriptor(
  '/shop.Template/DeleteTemplate',
  grpc.web.MethodType.UNARY,
  proto.shop.DeleteTemplateRequest,
  proto.shop.DeleteTemplateResponse,
  /**
   * @param {!proto.shop.DeleteTemplateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.shop.DeleteTemplateResponse.deserializeBinary
);


/**
 * @param {!proto.shop.DeleteTemplateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.shop.DeleteTemplateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.shop.DeleteTemplateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.shop.TemplateClient.prototype.deleteTemplate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/shop.Template/DeleteTemplate',
      request,
      metadata || {},
      methodDescriptor_Template_DeleteTemplate,
      callback);
};


/**
 * @param {!proto.shop.DeleteTemplateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.shop.DeleteTemplateResponse>}
 *     Promise that resolves to the response
 */
proto.shop.TemplatePromiseClient.prototype.deleteTemplate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/shop.Template/DeleteTemplate',
      request,
      metadata || {},
      methodDescriptor_Template_DeleteTemplate);
};


module.exports = proto.shop;

